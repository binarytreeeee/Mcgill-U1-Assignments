1
(A)
    input: array a of n elements and array b of m elements
    output: Number of distinct elements

    Algorithm: distinct(a, n, b, m)
        result <- 0

        for i <-1 to n
            if (NOT(BinarySearch(b, m, a[i])))
                result <- result + 1;

        for j <- 1 to m
            if (NOT(BinarySearch(a, n, b[j])))
                result <- result + 1;

        return result


    input: array a of n elements and array b of m elements
    output: Number of distinct elements in array a from b

    Algorithm: distinct_in_first(a, n, b, m)
        result <- 0

        for i <- 1 to n
            if (NOT(BinarySearch(b, m, a[i])))
                result <- result + 1

        return result;

(B)
    input: array a of n elements and array b of m elements
    output: Number of unique elements in the intersection

    Algorithm: fixed_intersection(a, n, b, m)
        intersect <- new int[1]
        count <- 0
        for i <- 1 to n
            if search(b,m,a[i])
                //intersect is of size count
                if NOT search(intersect, count, a[i] )
                    if count == intersect.length
                        intersect2 <- new int[intersect.length*2]
                        for j <- 1 to intersect.length
                            intersect2[j] <- intersect[j]
                        intersect <-intersect2
                    count <- count + 1
                    intersect[count] <- a[i]
        return count





2
(a)
    input: array a of n elements and natural number k
    output: array of elements occuring k times in array a
    
    Algorithm: k_times_elements(a, n, k)
        result <- new int[]

